#!/bin/bash
# Copyright (c) 2018, Anthony DeDominic <adedomin@gmail.com>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

die() {
    printf >&2 '%s\n' "Error: $*"
    exit 1
}

detect_version_template() {
    case "$1" in
        *'%version%'*'%version%'*)
            return 1
        ;;
    esac
}

version_glob() {
    VERSION_GLOB_1="${1%'%version%'*}"
    VERSION_GLOB_2="${1##"$VERSION_GLOB_1"}"
    VERSION_GLOB_2="${VERSION_GLOB_2#'%version%'}"
}

source /etc/bundle-kernel.conf || die 'Failed to source configuration.'
[[ -z "$KERNEL_PATTERN" ]] &&
    die 'missing $KERNEL_PATTERN from /etc/bundle-kernel.conf'
detect_version_template "$KERNEL_PATTERN" ||
    die 'there can only be one %version% pattern in $KERNEL_PATTERN.'
[[ -z "$INITRAMFS_PATTERN" ]] &&
    die 'missing $INITRAMFS_PATTERN from /etc/bundle-kernel.conf'
detect_version_template "$INITRAMFS_PATTERN" ||
    die 'there can only be one %version% pattern in $INITRAMFS_PATTERN.'
[[ -z "$DESTINATION_PATTERN" ]] &&
    die 'missing $DESTINATION_PATTERN, from /etc/bundle-kernel.conf.'
detect_version_template "$DESTINATION_PATTERN" ||
    die 'there can only be one %version% pattern in $DESTINATION_PATTERN.'
[[ -z "$LOADER_CONF_PATTERN" ]] &&
    die 'missing $LOADER_CONF_PATTERN, from /etc/bundle-kernel.conf.'
detect_version_template "$LOADER_CONF_PATTERN" ||
    die 'there can only be one %version% pattern in $LOADER_CONF_PATTERN.'
[[ -z "$CMDLINE_PATTERN" ]] &&
    die 'missing $CMDLINE_PATTERN from /etc/bundle-kernel.conf'
detect_version_template "$CMDLINE_PATTERN" ||
    die 'there can only be one %version% pattern in $CMDLINE_PATTERN.'
[[ ! -f "$OS_RELEASE" ]] &&
    die '$OS_RELEASE, from /etc/bundle-kernel.conf, is not a file.'
[[ ! -f "$SECUREBOOT_DBKEY" ]] &&
    die '$SECUREBOOT_DBKEY, from /etc/bundle-kernel.conf, is not a file.'
[[ ! -f "$SECUREBOOT_DBCRT" ]] &&
    die '$SECUREBOOT_DBCRT, from /etc/bundle-kernel.conf, is not a file.'
[[ -z "$ESP" ]] &&
    die 'missing $ESP from /etc/bundle-kernel.conf'
[[ -z "$BOOTLOADER_ENTRY_NAME" ]] &&
    die '$BOOTLOADER_ENTRY_NAME, from /etc/bundle-kernel.conf, is not specified.'
# TODO: consider removing this
[[ -z "$RETENTION" ]] &&
    die '$RETENTION is not defined in /etc/bundle-kernel.conf'

case "$0" in
    *.install)
        # invoked by freedesktop spec kernel-install
        kernel_install=1
    ;;
esac

case "$1" in
    help|-h|--help)
        printf >&2 '%s\n' \
'bundle-kernel [add|remove] [kernel-version]

Parameters
  kernel-version - the kernel to bundle instead of the latest version.

Bundle a kernel to be a single, bootable EFI application using systemd'\''s bootstub.'
        exit 1
    ;;
    add)
        kversion="$2"
    ;;
    remove)
        kversion="$2"
        destination="${DESTINATION_PATTERN/'%version%'/"$kversion"}"
        loader_conf="${LOADER_CONF_PATTERN/'%version%'/"$kversion"}"
        loader_conf="$ESP/loader/entries/${loader_conf}.conf"
        printf >&2 'Info: %s\n' "Removing bundled kernel version $kversion"
        rm -- "$destination" "$loader_conf" || \
            printf >&2 'Warning: %s\n' 'Could not remove bundled kernel version '"${kversion}"
        exit 0
    ;;
    *)
        kversion="$1"
    ;;
esac
if [[ -z "$kversion" ]]; then
    version_glob "${KERNEL_PATTERN}"
    klatest="$(
        printf '%s\0' "$VERSION_GLOB_1"*"$VERSION_GLOB_2" \
        | sort --version-sort \
            --zero-terminated \
            --reverse \
        | head -1 --zero-terminated \
        | tr -d '\0'
    )"

    kversion="${klatest##"$VERSION_GLOB_1"}"
    kversion="${kversion%"$VERSION_GLOB_2"}"
fi

kernel="${KERNEL_PATTERN/'%version%'/"$kversion"}"
[[ -f "$kernel" ]] ||
    die "no kernel found for given pattern $KERNEL_PATTERN - $kernel"

initramfs="${INITRAMFS_PATTERN/'%version%'/"$kversion"}"
[[ -f "$initramfs" ]] ||
    die "no initramfs found for given pattern $INITRAMFS_PATTERN - $initramfs"

cmdline="${CMDLINE_PATTERN/'%version%'/"$kversion"}"
[[ -f "$cmdline" ]] ||
    die "no cmdline found for given pattern $CMDLINE_PATTERN - $cmdline"

destination="${DESTINATION_PATTERN/'%version%'/"$kversion"}"
loader_conf="${LOADER_CONF_PATTERN/'%version%'/"$kversion"}"
loader_conf="$ESP/loader/entries/${loader_conf}.conf"

printf >&2 'Info: %s\n' "Bundling kernel version $kversion"

# create bundle for systemd-boot's bootloader
if [ -x /usr/lib/systemd/ukify ]; then
    /usr/lib/systemd/ukify build \
        --linux="$kernel" \
        --initrd="$initramfs" \
        --cmdline="$cmdline" \
        --os-release="$OS_RELEASE" \
        --output="$destination"
        # ukify's command line parser is broken.
        # --sign-kernel \
        # --signtool=sbsign \
        # --secureboot-private-key="$SECUREBOOT_DBKEY" \
        # --secureboot-certificate="$SECUREBOOT_DBCERT" \
else
    objcopy \
        --add-section .osrel="$OS_RELEASE" \
            --change-section-vma .osrel=0x20000 \
        --add-section .cmdline="$cmdline" \
            --change-section-vma .cmdline=0x30000 \
        --add-section .linux="$kernel" \
            --change-section-vma .linux=0x40000 \
        --add-section .initrd="$initramfs" \
            --change-section-vma .initrd=0x3000000 \
        \
        /usr/lib/systemd/boot/efi/linuxx64.efi.stub \
        "$destination" || die 'failed to create bundle'
fi

# secureboot sign bundle
sbsign \
    --key "$SECUREBOOT_DBKEY" \
    --cert "$SECUREBOOT_DBCRT" \
    --output "$destination" \
    "$destination" || die 'failed to sign bundle'

# generate bootloader entry
printf '%s\n' \
    "title $BOOTLOADER_ENTRY_NAME" \
    "version $kversion" \
    "efi ${destination#"$ESP"}" \
> "$loader_conf" ||
    die 'failed to create bootloader entry'

# TODO: consider removing this
if [[ -z "$kernel_install" ]]; then
    # remove older bundles and entries
    version_glob "${DESTINATION_PATTERN}"
    mapfile -t -d $'\0' bundles < <(
        printf '%s\0' "${VERSION_GLOB_1}"*"${VERSION_GLOB_2}" \
        | sort --version-sort \
            --zero-terminated \
            --reverse
    )
    rm -f -- "${bundles[@]:$RETENTION}"
    pushd "$ESP/loader/entries" >/dev/null || die 'failed to remove old entries'
        version_glob "${LOADER_CONF_PATTERN}"
        mapfile -t -d $'\0' entries < <(
            printf '%s\0' "${VERSION_GLOB_1}"*"${VERSION_GLOB_2}".conf \
            | sort --version-sort \
                --zero-terminated \
                --reverse
        )
        rm -f -- "${entries[@]:$RETENTION}"
fi
